#!/usr/bin/env bash

# initial values
executionType="check"

# script path
scriptPath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# declare parameter list array
PARAMETERS=()

# read arguments
# help:
# help: Usage: %scriptname% [options...] {install|update|status}
while [[ $# > 0 ]]; do
    case "$1" in
        # help:  -h,    --help                    Shows this help.
        # help:
        -h|--help)
            cat "$BASH_SOURCE" | grep --color=never "# help:" | grep -v 'cat parameter' | sed 's/[ ]*# help:[ ]\?//g' | sed "s~%scriptname%~$scriptname~g"
            exit 0
            ;;

        # help:  -v,    --version                 Shows the version number.
        # help:
        -v|--version)
            [ "$(type -t showVersion)" == "function" ] && showVersion || echo "Create a showVersion function to show some text here."
            exit 0
            ;;

        # collect all unknown parameters
        *)
            PARAMETERS+=("$1")
            ;;
    esac
    shift
done

# assign mode to executionType var
#if [ ! -z ${PARAMETERS[0]} ]; then
#    executionType="${PARAMETERS[0]}"
#fi

# declare domains variable
declare -A domains

function getHeader {
    curl -I -L $1 2>&1
}

function hasRedirectFromHeader {
    local targetCurrent=$(echo "$1" | grep --color=never Location | tail -n 1 | sed 's/^Location: //')

    # no Location header was found
    [ "$targetCurrent" == "" ] && return 1

    # header was found
    return 0
}

function getLastRedirectFromHeader {
    local targetCurrent=$(echo "$1" | grep --color=never Location | tail -n 1 | sed 's/^Location: //')

    # no Location header was found
    [ "$targetCurrent" == "" ] && return

    # remove some special chars
    targetCurrent=$(echo -e -n "$targetCurrent" | xargs | tr -dc ':/.\-[:alnum:]')

    echo "$targetCurrent"
}

function checkLink {
    local domain="$1"
    local targetExpected="$2"
    local testState=$3
    local state=0
    local header=""

    echo "check domain $domain"
    echo "target expected: $targetExpected "

    # fetch header
    if ! $testState; then
        header=$(getHeader "$domain")
    fi

    # extract redirect
    if hasRedirectFromHeader "$header"; then
        targetCurrent=$(getLastRedirectFromHeader "$header")
    else
        targetCurrent="no redirect was found"
    fi

    echo "target current:  $targetCurrent"

    echo -n "State: "
    if $testState || [ "$targetCurrent" == "$targetExpected" ]; then
        echo -e "\e[42mOK\e[0m"
        state=0
    else
        echo -e "\e[41mNOT OK\e[0m"
        state=1
    fi

    echo ""

    # simulate positive state
    $testState && return 0

    return $state
}

function doRedirectTest {
    local testState=false
    local stateOverall=true

    local protocols=( 'http://' 'http://www.' 'https://' 'https://www.' )

    # iterate through all domains
    for i in "${!domains[@]}"; do
        for protocol in "${protocols[@]}"; do
            domain="$protocol$i"
            targetExpected="${domains[$i]}"
            if ! checkLink "$domain" "$targetExpected" $testState; then
                stateOverall=false
            fi
        done
    done

    # print state
    if $stateOverall; then
        echo -e "\e[42mAll tests passed.\e[0m"
    else
        echo -e "\e[41mAt least one test failed.\e[0m"
    fi
}

# start the test
if [ "$executionType" == "check" ]; then

    # Parameter one is expected as a config file
    if [ ${#PARAMETERS[@]} -lt 1 ]; then
        echo "Config path is missing." && exit 1
    fi

    # config path
    configPath=""

    # config check variable
    configFileExists=false

    # try to find global file
    if ! $configFileExists; then
        # build config file
        configPath="${PARAMETERS[0]}"

        # check config file (global file was found)
        if [ -f "$configPath" ]; then
            configFileExists=true
        fi
    fi

    # try to find local file
    if ! $configFileExists; then
        # build config file
        configPath="$scriptPath/../${PARAMETERS[0]}"

        # check config file (local file was found)
        if [ -f "$configPath" ]; then
            configFileExists=true
        fi
    fi

    # config file was not found
    if ! $configFileExists; then
        echo "Config path \"$configPath\" was not found." && exit 2
    fi

    # read given config file
    while read source target; do
        # config error
        if [ "$source" == "" ] || [ "$target" == "" ]; then
            continue
        fi

        domains[$source]="$target"
    done < "$configPath"

    # start redirect checker
    doRedirectTest
fi

